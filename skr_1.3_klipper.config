# Geeetech Thunder with SKR 1.3 with BMG, TMC 2009, ADXL345, Rapido V2 HF Hotend and Klipper

[stepper_z]
step_pin: P0.22
dir_pin: P2.11
enable_pin: !P0.21
microsteps: 16
rotation_distance: 8
endstop_pin: P1.25
position_endstop: 0.8
position_max: 400
position_min: -1

[stepper_z1]
step_pin: P2.2
dir_pin: P2.6
enable_pin: !P2.1
microsteps: 16
rotation_distance: 8
endstop_pin: P1.24  
#position_endstop: 0
#position_max: 320
#homing_speed: 50

[stepper_y]
step_pin: P0.19
dir_pin: !P0.20
enable_pin: !P2.8
microsteps: 16
rotation_distance: 26.5
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 0
position_max: 300
homing_speed: 50

[stepper_x]
step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: -2
position_min: -2
position_max: 400
homing_speed: 50

[extruder]
step_pin: P0.1
dir_pin: P0.0
enable_pin: !P0.10
microsteps: 16
rotation_distance: 8 # Higher Value is lesser Filamentextrusion / 7.71 0,9 zubÂ´viel
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.7
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: P0.24
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 290
min_extrude_temp: 50

[input_shaper]
#shaper_type_x = 3hump_ei
#shaper_freq_x = 67.8
#shaper_type_y = ei
#shaper_freq_y = 62.4
shaper_type: mzv

[heater_bed]
heater_pin: P2.5
sensor_type: ATC Semitec 104GT-2
sensor_pin: P0.23
control: watermark
min_temp: 0
max_temp: 130

[multi_pin fans_pin]
pins: P2.3, P2.4

[fan]
pin: multi_pin:fans_pin

[output_pin led]
pin: P1.31

[mcu]
serial: /dev/serial/by-id/usb-Klipper_lpc1768_14100111A88C3CAF5DBB705CC12000F5-if00

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    125, 125, 20  # X,Y,Z Center of the Bed

[virtual_sdcard]
path: ~/.octoprint/uploads/

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 4000
max_z_velocity: 25
max_z_accel: 100
buffer_time_high: 20 # 25 # 2 was Standard

[bltouch]
sensor_pin: P1.28
control_pin: P2.0
#z_offset = 3 # 1.4 Higher Value is closer to the Bed
y_offset: -60

[bed_mesh]
speed: 120
horizontal_move_z: 10
mesh_min: 30, 30
mesh_max: 220, 220
probe_count: 5, 5
fade_start: 1
fade_end: 10
fade_target: 0

[filament_switch_sensor RunoutSensor]
pause_on_runout: False
runout_gcode: 
  {action_respond_info("RUNOUT: Filament runout")}
  PAUSE
insert_gcode: {action_respond_info("RUNOUT: Filament inserted")}
switch_pin: !P1.26

########################################
# TMC2208 configuration
########################################

# For TMC2208 UART
#   1) Remove all of the jumpers below the stepper drivers
#   2) Place jumpers on the red pin headers labeled XUART (XUART, YUART etc.)

[tmc2209 stepper_z]
uart_pin: P1.10
run_current: 0.8
stealthchop_threshold: 999999
interpolate: False

[tmc2209 stepper_z1]
uart_pin: P1.17
run_current: 0.8
stealthchop_threshold: 999999
interpolate: False

[tmc2209 stepper_y]
uart_pin: P1.15
run_current: 1.0
stealthchop_threshold: 999999
diag_pin: P1.27
interpolate: False

[tmc2209 stepper_x]
uart_pin: P1.8
run_current: 0.800
stealthchop_threshold: 999999
diag_pin: P1.29
interpolate: False

[tmc2209 extruder]
uart_pin: P1.1
run_current: 0.82
interpolate: False

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
  
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro CALCULATE_PA]
gcode:
    {% set material = params.MATERIAL|default("PLA") %}
    {% set bowden_length = (params.BOWDEN_LENGTH|default(31)|float) / 10 %}
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set print_speed = params.PRINT_SPEED|default(180)|float %}
    {% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
    {% set vfr = nozzle_size * layer_height * print_speed %}
    {% set pressure_advance = (vfr * bowden_length) / material_constant %}
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

# Examples: 
# TEST_PRINT_SPEED
# TEST_PRINT_SPEED SPEED=100 ACC=3000
# TEST_PRINT_SPEED SPEED=100 ACC=3000 TEMP_NOZZLE=200 TEMP_BED=50 DIA_FILAMENT=1.75 DIA_NOZZLE=0.4 LAYER_HEIGHT=0.2 FLOW_RATE=1.1 CALIBRATE=1
[gcode_macro TEST_PRINT_SPEED]
gcode:
    # user inputs, u also can set defaults here 
    {% set SPEED = params.SPEED|default(100)|int %}
    {% set ACC = params.ACC|default(3000)|int %}
    {% set TEMP_NOZZLE = params.TEMP_NOZZLE|default(200)|int %}
    {% set TEMP_BED = params.TEMP_BED|default(50)|int %}
    {% set DIA_FILAMENT = params.DIA_FILAMENT|default(1.75)|float %}
    {% set DIA_NOZZLE = params.DIA_NOZZLE|default(0.6)|float %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.3)|float %}
    {% set FLOW_RATE = params.FLOW_RATE|default(1)|float %}
    {% set CALIBRATE = params.CALIBRATE|default(0)|int %}

    # system vars, can be changed here
    {% set LAYER_WIDTH = DIA_NOZZLE * 1.2|float %}
    {% set DISTANCE = 100|int %}
    {% set LAYERS = 10|int %}
    {% set FIRST_LAYER_SPEED = 60|int %}

    # calculate extrusion lengths
    {% set extrusion_area = (LAYER_WIDTH - LAYER_HEIGHT) * LAYER_HEIGHT + 3.14159 * (LAYER_HEIGHT / 2) ** 2 %}
    {% set filament_length = (extrusion_area * DISTANCE * 4 / (3.14159 * DIA_FILAMENT ** 2)) * FLOW_RATE|round(5) %}
    {% set filament_prime_length = (extrusion_area * 50 * 4 / (3.14159 * DIA_FILAMENT ** 2)) * FLOW_RATE|round(5) %}

    # set acceleration
    M204 S{ACC}

    # homing
    M107
    G90
    G28
    G1 Z50

    # preheat
    M140 S{TEMP_BED}
    M104 S130
    M109 S130
    M190 S{TEMP_BED}

    {% if CALIBRATE == 1 %}
        BED_MESH_CALIBRATE
    {% endif %}

    # calculate and display settings
    {% set extrusion_volume  = extrusion_area * DISTANCE %}
    {% set time_for_extrusion = DISTANCE / SPEED  %}
    {% set volumetric_flow_rate = extrusion_volume / time_for_extrusion  %}
    { action_respond_info("testing printspeed: %f mm/s" % SPEED) }
    { action_respond_info("volumetric E: %f mm3/s" % volumetric_flow_rate) }
    { action_respond_info("layer width should be: %f mm" % LAYER_WIDTH) }

    # go to start position
    G1 X0 Y50 F{SPEED*60}
    M109 S{TEMP_NOZZLE}
    G1 Z{LAYER_HEIGHT}

    # primeline
    G92 E0
    G1 E5 F500
    G1 X50 E{filament_prime_length} F500
    G92 E0

    # print loop
    {% for i in range(LAYERS) %}
         # set first layer speed
        {% if i == 0 %}
            {% set layer_speed = FIRST_LAYER_SPEED %}
        {% else %}
            {% set layer_speed = SPEED %}
        {% endif %}

        # move and extrude
        G1 X{DISTANCE + 50} E{filament_length * 1} F{layer_speed*60}
        G1 Y{DISTANCE + 50} E{filament_length * 2} F{layer_speed*60}
        G1 X50 E{filament_length * 3} F{layer_speed*60}
        G1 Y50 E{filament_length * 4} F{layer_speed*60}

        # move up in realtive
        G91
        G1 Z{LAYER_HEIGHT} F10000
        G90

        #reset extrudeer
        G92 E0

        # enable fan after first layer
        {% if i == 0 %}
            M106 S255
        {% endif %}
    {% endfor %}

    # end position
    G1 Z50 X0 Y100 F10000
    M106 S0
    
    
    
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 20.768
#*# pid_ki = 2.036
#*# pid_kd = 52.959
#*#
#*# [input_shaper]
#*# shaper_type_x = ei
#*# shaper_freq_x = 46.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 48.8
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.087500, -0.267500, -0.470000, -0.452500, -0.220000
#*# 	  0.250000, -0.072500, -0.312500, -0.275000, -0.092500
#*# 	  0.280000, -0.135000, -0.270000, -0.232500, 0.005000
#*# 	  0.297500, -0.030000, -0.202500, -0.160000, -0.010000
#*# 	  0.250000, -0.100000, -0.252500, -0.190000, 0.015000
#*# tension = 0.2
#*# min_x = 30.0
#*# algo = lagrange
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 30.0
#*# x_count = 5
#*# max_y = 220.0
#*# mesh_x_pps = 2
#*# max_x = 220.0
#*#
#*# [bltouch]
#*# z_offset = 1.48
